# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from krssg_ssl_msgs/sslDebug_Data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import krssg_ssl_msgs.msg

class sslDebug_Data(genpy.Message):
  _md5sum = "a4f68973c1a24950c9f075574765c5e7"
  _type = "krssg_ssl_msgs/sslDebug_Data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string id
sslDebug_Line[] line
sslDebug_Circle[] circle
================================================================================
MSG: krssg_ssl_msgs/sslDebug_Line
int32 x1
int32 y1
int32 x2
int32 y2
float32 color
================================================================================
MSG: krssg_ssl_msgs/sslDebug_Circle
int32 x
int32 y
int32 radius
float32 color"""
  __slots__ = ['id','line','circle']
  _slot_types = ['string','krssg_ssl_msgs/sslDebug_Line[]','krssg_ssl_msgs/sslDebug_Circle[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,line,circle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sslDebug_Data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = ''
      if self.line is None:
        self.line = []
      if self.circle is None:
        self.circle = []
    else:
      self.id = ''
      self.line = []
      self.circle = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.line)
      buff.write(_struct_I.pack(length))
      for val1 in self.line:
        _x = val1
        buff.write(_struct_4if.pack(_x.x1, _x.y1, _x.x2, _x.y2, _x.color))
      length = len(self.circle)
      buff.write(_struct_I.pack(length))
      for val1 in self.circle:
        _x = val1
        buff.write(_struct_3if.pack(_x.x, _x.y, _x.radius, _x.color))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.line is None:
        self.line = None
      if self.circle is None:
        self.circle = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line = []
      for i in range(0, length):
        val1 = krssg_ssl_msgs.msg.sslDebug_Line()
        _x = val1
        start = end
        end += 20
        (_x.x1, _x.y1, _x.x2, _x.y2, _x.color,) = _struct_4if.unpack(str[start:end])
        self.line.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.circle = []
      for i in range(0, length):
        val1 = krssg_ssl_msgs.msg.sslDebug_Circle()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.radius, _x.color,) = _struct_3if.unpack(str[start:end])
        self.circle.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.line)
      buff.write(_struct_I.pack(length))
      for val1 in self.line:
        _x = val1
        buff.write(_struct_4if.pack(_x.x1, _x.y1, _x.x2, _x.y2, _x.color))
      length = len(self.circle)
      buff.write(_struct_I.pack(length))
      for val1 in self.circle:
        _x = val1
        buff.write(_struct_3if.pack(_x.x, _x.y, _x.radius, _x.color))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.line is None:
        self.line = None
      if self.circle is None:
        self.circle = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line = []
      for i in range(0, length):
        val1 = krssg_ssl_msgs.msg.sslDebug_Line()
        _x = val1
        start = end
        end += 20
        (_x.x1, _x.y1, _x.x2, _x.y2, _x.color,) = _struct_4if.unpack(str[start:end])
        self.line.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.circle = []
      for i in range(0, length):
        val1 = krssg_ssl_msgs.msg.sslDebug_Circle()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.radius, _x.color,) = _struct_3if.unpack(str[start:end])
        self.circle.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4if = struct.Struct("<4if")
_struct_3if = struct.Struct("<3if")
