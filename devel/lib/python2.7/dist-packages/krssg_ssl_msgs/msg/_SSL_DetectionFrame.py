# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from krssg_ssl_msgs/SSL_DetectionFrame.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import krssg_ssl_msgs.msg

class SSL_DetectionFrame(genpy.Message):
  _md5sum = "7c644edf1c1b3db92581949cc15a0ca0"
  _type = "krssg_ssl_msgs/SSL_DetectionFrame"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# SSL_DetectionFrame.msg


uint32             frame_number 
float64            t_capture     
float64            t_sent        
uint32             camera_id     
SSL_DetectionBall[]  balls         
SSL_DetectionRobot[] robots_yellow 
SSL_DetectionRobot[] robots_blue   

================================================================================
MSG: krssg_ssl_msgs/SSL_DetectionBall
float64  confidence 
uint32 area      
float64  x         
float64  y          
float64  z          
float64  pixel_x    
float64  pixel_y    

================================================================================
MSG: krssg_ssl_msgs/SSL_DetectionRobot
float64  confidence 
uint32   robot_id      
float64  x         
float64  y           
float64  orientation        
float64  pixel_x    
float64  pixel_y  
float64  height   
"""
  __slots__ = ['frame_number','t_capture','t_sent','camera_id','balls','robots_yellow','robots_blue']
  _slot_types = ['uint32','float64','float64','uint32','krssg_ssl_msgs/SSL_DetectionBall[]','krssg_ssl_msgs/SSL_DetectionRobot[]','krssg_ssl_msgs/SSL_DetectionRobot[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame_number,t_capture,t_sent,camera_id,balls,robots_yellow,robots_blue

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SSL_DetectionFrame, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frame_number is None:
        self.frame_number = 0
      if self.t_capture is None:
        self.t_capture = 0.
      if self.t_sent is None:
        self.t_sent = 0.
      if self.camera_id is None:
        self.camera_id = 0
      if self.balls is None:
        self.balls = []
      if self.robots_yellow is None:
        self.robots_yellow = []
      if self.robots_blue is None:
        self.robots_blue = []
    else:
      self.frame_number = 0
      self.t_capture = 0.
      self.t_sent = 0.
      self.camera_id = 0
      self.balls = []
      self.robots_yellow = []
      self.robots_blue = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_I2dI.pack(_x.frame_number, _x.t_capture, _x.t_sent, _x.camera_id))
      length = len(self.balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.balls:
        _x = val1
        buff.write(_struct_dI5d.pack(_x.confidence, _x.area, _x.x, _x.y, _x.z, _x.pixel_x, _x.pixel_y))
      length = len(self.robots_yellow)
      buff.write(_struct_I.pack(length))
      for val1 in self.robots_yellow:
        _x = val1
        buff.write(_struct_dI6d.pack(_x.confidence, _x.robot_id, _x.x, _x.y, _x.orientation, _x.pixel_x, _x.pixel_y, _x.height))
      length = len(self.robots_blue)
      buff.write(_struct_I.pack(length))
      for val1 in self.robots_blue:
        _x = val1
        buff.write(_struct_dI6d.pack(_x.confidence, _x.robot_id, _x.x, _x.y, _x.orientation, _x.pixel_x, _x.pixel_y, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.balls is None:
        self.balls = None
      if self.robots_yellow is None:
        self.robots_yellow = None
      if self.robots_blue is None:
        self.robots_blue = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.frame_number, _x.t_capture, _x.t_sent, _x.camera_id,) = _struct_I2dI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.balls = []
      for i in range(0, length):
        val1 = krssg_ssl_msgs.msg.SSL_DetectionBall()
        _x = val1
        start = end
        end += 52
        (_x.confidence, _x.area, _x.x, _x.y, _x.z, _x.pixel_x, _x.pixel_y,) = _struct_dI5d.unpack(str[start:end])
        self.balls.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robots_yellow = []
      for i in range(0, length):
        val1 = krssg_ssl_msgs.msg.SSL_DetectionRobot()
        _x = val1
        start = end
        end += 60
        (_x.confidence, _x.robot_id, _x.x, _x.y, _x.orientation, _x.pixel_x, _x.pixel_y, _x.height,) = _struct_dI6d.unpack(str[start:end])
        self.robots_yellow.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robots_blue = []
      for i in range(0, length):
        val1 = krssg_ssl_msgs.msg.SSL_DetectionRobot()
        _x = val1
        start = end
        end += 60
        (_x.confidence, _x.robot_id, _x.x, _x.y, _x.orientation, _x.pixel_x, _x.pixel_y, _x.height,) = _struct_dI6d.unpack(str[start:end])
        self.robots_blue.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_I2dI.pack(_x.frame_number, _x.t_capture, _x.t_sent, _x.camera_id))
      length = len(self.balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.balls:
        _x = val1
        buff.write(_struct_dI5d.pack(_x.confidence, _x.area, _x.x, _x.y, _x.z, _x.pixel_x, _x.pixel_y))
      length = len(self.robots_yellow)
      buff.write(_struct_I.pack(length))
      for val1 in self.robots_yellow:
        _x = val1
        buff.write(_struct_dI6d.pack(_x.confidence, _x.robot_id, _x.x, _x.y, _x.orientation, _x.pixel_x, _x.pixel_y, _x.height))
      length = len(self.robots_blue)
      buff.write(_struct_I.pack(length))
      for val1 in self.robots_blue:
        _x = val1
        buff.write(_struct_dI6d.pack(_x.confidence, _x.robot_id, _x.x, _x.y, _x.orientation, _x.pixel_x, _x.pixel_y, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.balls is None:
        self.balls = None
      if self.robots_yellow is None:
        self.robots_yellow = None
      if self.robots_blue is None:
        self.robots_blue = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.frame_number, _x.t_capture, _x.t_sent, _x.camera_id,) = _struct_I2dI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.balls = []
      for i in range(0, length):
        val1 = krssg_ssl_msgs.msg.SSL_DetectionBall()
        _x = val1
        start = end
        end += 52
        (_x.confidence, _x.area, _x.x, _x.y, _x.z, _x.pixel_x, _x.pixel_y,) = _struct_dI5d.unpack(str[start:end])
        self.balls.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robots_yellow = []
      for i in range(0, length):
        val1 = krssg_ssl_msgs.msg.SSL_DetectionRobot()
        _x = val1
        start = end
        end += 60
        (_x.confidence, _x.robot_id, _x.x, _x.y, _x.orientation, _x.pixel_x, _x.pixel_y, _x.height,) = _struct_dI6d.unpack(str[start:end])
        self.robots_yellow.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robots_blue = []
      for i in range(0, length):
        val1 = krssg_ssl_msgs.msg.SSL_DetectionRobot()
        _x = val1
        start = end
        end += 60
        (_x.confidence, _x.robot_id, _x.x, _x.y, _x.orientation, _x.pixel_x, _x.pixel_y, _x.height,) = _struct_dI6d.unpack(str[start:end])
        self.robots_blue.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_I2dI = struct.Struct("<I2dI")
_struct_dI6d = struct.Struct("<dI6d")
_struct_dI5d = struct.Struct("<dI5d")
