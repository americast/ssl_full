# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from krssg_ssl_msgs/SSL_Refbox.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SSL_Refbox(genpy.Message):
  _md5sum = "473e87105d23511aae7f9b0fe64666df"
  _type = "krssg_ssl_msgs/SSL_Refbox"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 packet_timestamp
uint32 stage
uint32 stage_time_left
uint32 command
uint32 command_counter
uint32 command_timestamp
string b_name
uint32 b_score
uint32 b_red_cards
uint32 b_yellow_cards
uint32 b_timeouts
uint32 b_timeout_time
uint32 b_goalie
string y_name
uint32 y_score
uint32 y_red_cards
uint32 y_yellow_cards
uint32 y_timeouts
uint32 y_timeout_time
uint32 y_goalie
uint32[] y_card_times
uint32[] b_card_times

	
"""
  __slots__ = ['packet_timestamp','stage','stage_time_left','command','command_counter','command_timestamp','b_name','b_score','b_red_cards','b_yellow_cards','b_timeouts','b_timeout_time','b_goalie','y_name','y_score','y_red_cards','y_yellow_cards','y_timeouts','y_timeout_time','y_goalie','y_card_times','b_card_times']
  _slot_types = ['float64','uint32','uint32','uint32','uint32','uint32','string','uint32','uint32','uint32','uint32','uint32','uint32','string','uint32','uint32','uint32','uint32','uint32','uint32','uint32[]','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       packet_timestamp,stage,stage_time_left,command,command_counter,command_timestamp,b_name,b_score,b_red_cards,b_yellow_cards,b_timeouts,b_timeout_time,b_goalie,y_name,y_score,y_red_cards,y_yellow_cards,y_timeouts,y_timeout_time,y_goalie,y_card_times,b_card_times

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SSL_Refbox, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.packet_timestamp is None:
        self.packet_timestamp = 0.
      if self.stage is None:
        self.stage = 0
      if self.stage_time_left is None:
        self.stage_time_left = 0
      if self.command is None:
        self.command = 0
      if self.command_counter is None:
        self.command_counter = 0
      if self.command_timestamp is None:
        self.command_timestamp = 0
      if self.b_name is None:
        self.b_name = ''
      if self.b_score is None:
        self.b_score = 0
      if self.b_red_cards is None:
        self.b_red_cards = 0
      if self.b_yellow_cards is None:
        self.b_yellow_cards = 0
      if self.b_timeouts is None:
        self.b_timeouts = 0
      if self.b_timeout_time is None:
        self.b_timeout_time = 0
      if self.b_goalie is None:
        self.b_goalie = 0
      if self.y_name is None:
        self.y_name = ''
      if self.y_score is None:
        self.y_score = 0
      if self.y_red_cards is None:
        self.y_red_cards = 0
      if self.y_yellow_cards is None:
        self.y_yellow_cards = 0
      if self.y_timeouts is None:
        self.y_timeouts = 0
      if self.y_timeout_time is None:
        self.y_timeout_time = 0
      if self.y_goalie is None:
        self.y_goalie = 0
      if self.y_card_times is None:
        self.y_card_times = []
      if self.b_card_times is None:
        self.b_card_times = []
    else:
      self.packet_timestamp = 0.
      self.stage = 0
      self.stage_time_left = 0
      self.command = 0
      self.command_counter = 0
      self.command_timestamp = 0
      self.b_name = ''
      self.b_score = 0
      self.b_red_cards = 0
      self.b_yellow_cards = 0
      self.b_timeouts = 0
      self.b_timeout_time = 0
      self.b_goalie = 0
      self.y_name = ''
      self.y_score = 0
      self.y_red_cards = 0
      self.y_yellow_cards = 0
      self.y_timeouts = 0
      self.y_timeout_time = 0
      self.y_goalie = 0
      self.y_card_times = []
      self.b_card_times = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_d5I.pack(_x.packet_timestamp, _x.stage, _x.stage_time_left, _x.command, _x.command_counter, _x.command_timestamp))
      _x = self.b_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6I.pack(_x.b_score, _x.b_red_cards, _x.b_yellow_cards, _x.b_timeouts, _x.b_timeout_time, _x.b_goalie))
      _x = self.y_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6I.pack(_x.y_score, _x.y_red_cards, _x.y_yellow_cards, _x.y_timeouts, _x.y_timeout_time, _x.y_goalie))
      length = len(self.y_card_times)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.y_card_times))
      length = len(self.b_card_times)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.b_card_times))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.packet_timestamp, _x.stage, _x.stage_time_left, _x.command, _x.command_counter, _x.command_timestamp,) = _struct_d5I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.b_name = str[start:end].decode('utf-8')
      else:
        self.b_name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.b_score, _x.b_red_cards, _x.b_yellow_cards, _x.b_timeouts, _x.b_timeout_time, _x.b_goalie,) = _struct_6I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.y_name = str[start:end].decode('utf-8')
      else:
        self.y_name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.y_score, _x.y_red_cards, _x.y_yellow_cards, _x.y_timeouts, _x.y_timeout_time, _x.y_goalie,) = _struct_6I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.y_card_times = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.b_card_times = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_d5I.pack(_x.packet_timestamp, _x.stage, _x.stage_time_left, _x.command, _x.command_counter, _x.command_timestamp))
      _x = self.b_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6I.pack(_x.b_score, _x.b_red_cards, _x.b_yellow_cards, _x.b_timeouts, _x.b_timeout_time, _x.b_goalie))
      _x = self.y_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6I.pack(_x.y_score, _x.y_red_cards, _x.y_yellow_cards, _x.y_timeouts, _x.y_timeout_time, _x.y_goalie))
      length = len(self.y_card_times)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.y_card_times.tostring())
      length = len(self.b_card_times)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.b_card_times.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.packet_timestamp, _x.stage, _x.stage_time_left, _x.command, _x.command_counter, _x.command_timestamp,) = _struct_d5I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.b_name = str[start:end].decode('utf-8')
      else:
        self.b_name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.b_score, _x.b_red_cards, _x.b_yellow_cards, _x.b_timeouts, _x.b_timeout_time, _x.b_goalie,) = _struct_6I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.y_name = str[start:end].decode('utf-8')
      else:
        self.y_name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.y_score, _x.y_red_cards, _x.y_yellow_cards, _x.y_timeouts, _x.y_timeout_time, _x.y_goalie,) = _struct_6I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.y_card_times = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.b_card_times = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d5I = struct.Struct("<d5I")
_struct_6I = struct.Struct("<6I")
