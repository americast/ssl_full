# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from krssg_ssl_msgs/gr_Robot_Command.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gr_Robot_Command(genpy.Message):
  _md5sum = "b80457e93869f2f2bd035c51d34aed48"
  _type = "krssg_ssl_msgs/gr_Robot_Command"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 id
float32 kickspeedx
float32 kickspeedz
float32 veltangent
float32 velnormal
float32 velangular
bool spinner
bool wheelsspeed
"""
  __slots__ = ['id','kickspeedx','kickspeedz','veltangent','velnormal','velangular','spinner','wheelsspeed']
  _slot_types = ['uint32','float32','float32','float32','float32','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,kickspeedx,kickspeedz,veltangent,velnormal,velangular,spinner,wheelsspeed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gr_Robot_Command, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.kickspeedx is None:
        self.kickspeedx = 0.
      if self.kickspeedz is None:
        self.kickspeedz = 0.
      if self.veltangent is None:
        self.veltangent = 0.
      if self.velnormal is None:
        self.velnormal = 0.
      if self.velangular is None:
        self.velangular = 0.
      if self.spinner is None:
        self.spinner = False
      if self.wheelsspeed is None:
        self.wheelsspeed = False
    else:
      self.id = 0
      self.kickspeedx = 0.
      self.kickspeedz = 0.
      self.veltangent = 0.
      self.velnormal = 0.
      self.velangular = 0.
      self.spinner = False
      self.wheelsspeed = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_I5f2B.pack(_x.id, _x.kickspeedx, _x.kickspeedz, _x.veltangent, _x.velnormal, _x.velangular, _x.spinner, _x.wheelsspeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.id, _x.kickspeedx, _x.kickspeedz, _x.veltangent, _x.velnormal, _x.velangular, _x.spinner, _x.wheelsspeed,) = _struct_I5f2B.unpack(str[start:end])
      self.spinner = bool(self.spinner)
      self.wheelsspeed = bool(self.wheelsspeed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_I5f2B.pack(_x.id, _x.kickspeedx, _x.kickspeedz, _x.veltangent, _x.velnormal, _x.velangular, _x.spinner, _x.wheelsspeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.id, _x.kickspeedx, _x.kickspeedz, _x.veltangent, _x.velnormal, _x.velangular, _x.spinner, _x.wheelsspeed,) = _struct_I5f2B.unpack(str[start:end])
      self.spinner = bool(self.spinner)
      self.wheelsspeed = bool(self.wheelsspeed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_I5f2B = struct.Struct("<I5f2B")
