// Generated by gencpp from file krssg_ssl_msgs/gr_Commands.msg
// DO NOT EDIT!


#ifndef KRSSG_SSL_MSGS_MESSAGE_GR_COMMANDS_H
#define KRSSG_SSL_MSGS_MESSAGE_GR_COMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <krssg_ssl_msgs/gr_Robot_Command.h>

namespace krssg_ssl_msgs
{
template <class ContainerAllocator>
struct gr_Commands_
{
  typedef gr_Commands_<ContainerAllocator> Type;

  gr_Commands_()
    : timestamp(0.0)
    , isteamyellow(false)
    , robot_commands()  {
    }
  gr_Commands_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , isteamyellow(false)
    , robot_commands(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _isteamyellow_type;
  _isteamyellow_type isteamyellow;

   typedef  ::krssg_ssl_msgs::gr_Robot_Command_<ContainerAllocator>  _robot_commands_type;
  _robot_commands_type robot_commands;




  typedef boost::shared_ptr< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> const> ConstPtr;

}; // struct gr_Commands_

typedef ::krssg_ssl_msgs::gr_Commands_<std::allocator<void> > gr_Commands;

typedef boost::shared_ptr< ::krssg_ssl_msgs::gr_Commands > gr_CommandsPtr;
typedef boost::shared_ptr< ::krssg_ssl_msgs::gr_Commands const> gr_CommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace krssg_ssl_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'krssg_ssl_msgs': ['/home/aif/ssl/americast/src/krssg_ssl_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a045d291425bb1bd3aa6136dde3d9bfa";
  }

  static const char* value(const ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa045d291425bb1bdULL;
  static const uint64_t static_value2 = 0x3aa6136dde3d9bfaULL;
};

template<class ContainerAllocator>
struct DataType< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "krssg_ssl_msgs/gr_Commands";
  }

  static const char* value(const ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp\n\
bool isteamyellow\n\
gr_Robot_Command robot_commands\n\
\n\
================================================================================\n\
MSG: krssg_ssl_msgs/gr_Robot_Command\n\
uint32 id\n\
float32 kickspeedx\n\
float32 kickspeedz\n\
float32 veltangent\n\
float32 velnormal\n\
float32 velangular\n\
bool spinner\n\
bool wheelsspeed\n\
";
  }

  static const char* value(const ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.isteamyellow);
      stream.next(m.robot_commands);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gr_Commands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "isteamyellow: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isteamyellow);
    s << indent << "robot_commands: ";
    s << std::endl;
    Printer< ::krssg_ssl_msgs::gr_Robot_Command_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_commands);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KRSSG_SSL_MSGS_MESSAGE_GR_COMMANDS_H
