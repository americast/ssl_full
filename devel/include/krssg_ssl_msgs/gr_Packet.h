// Generated by gencpp from file krssg_ssl_msgs/gr_Packet.msg
// DO NOT EDIT!


#ifndef KRSSG_SSL_MSGS_MESSAGE_GR_PACKET_H
#define KRSSG_SSL_MSGS_MESSAGE_GR_PACKET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <krssg_ssl_msgs/gr_Commands.h>
#include <krssg_ssl_msgs/gr_Replacement.h>
#include <krssg_ssl_msgs/sslDebug_Data.h>

namespace krssg_ssl_msgs
{
template <class ContainerAllocator>
struct gr_Packet_
{
  typedef gr_Packet_<ContainerAllocator> Type;

  gr_Packet_()
    : commands()
    , replacement()
    , debuginfo()  {
    }
  gr_Packet_(const ContainerAllocator& _alloc)
    : commands(_alloc)
    , replacement(_alloc)
    , debuginfo(_alloc)  {
  (void)_alloc;
    }



   typedef  ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator>  _commands_type;
  _commands_type commands;

   typedef  ::krssg_ssl_msgs::gr_Replacement_<ContainerAllocator>  _replacement_type;
  _replacement_type replacement;

   typedef  ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator>  _debuginfo_type;
  _debuginfo_type debuginfo;




  typedef boost::shared_ptr< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> const> ConstPtr;

}; // struct gr_Packet_

typedef ::krssg_ssl_msgs::gr_Packet_<std::allocator<void> > gr_Packet;

typedef boost::shared_ptr< ::krssg_ssl_msgs::gr_Packet > gr_PacketPtr;
typedef boost::shared_ptr< ::krssg_ssl_msgs::gr_Packet const> gr_PacketConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace krssg_ssl_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'krssg_ssl_msgs': ['/home/ss/robocup/src/krssg_ssl_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9f779287879cb8e47b613424fa478ac";
  }

  static const char* value(const ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9f779287879cb8eULL;
  static const uint64_t static_value2 = 0x47b613424fa478acULL;
};

template<class ContainerAllocator>
struct DataType< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "krssg_ssl_msgs/gr_Packet";
  }

  static const char* value(const ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gr_Commands commands\n\
gr_Replacement replacement\n\
sslDebug_Data debuginfo\n\
================================================================================\n\
MSG: krssg_ssl_msgs/gr_Commands\n\
float64 timestamp\n\
bool isteamyellow\n\
gr_Robot_Command robot_commands\n\
\n\
================================================================================\n\
MSG: krssg_ssl_msgs/gr_Robot_Command\n\
uint32 id\n\
float32 kickspeedx\n\
float32 kickspeedz\n\
float32 veltangent\n\
float32 velnormal\n\
float32 velangular\n\
bool spinner\n\
bool wheelsspeed\n\
\n\
================================================================================\n\
MSG: krssg_ssl_msgs/gr_Replacement\n\
gr_BallReplacement ball  \n\
gr_RobotReplacement robots  \n\
\n\
\n\
================================================================================\n\
MSG: krssg_ssl_msgs/gr_BallReplacement\n\
float64 x \n\
float64 y \n\
float64 vx \n\
float64 vy \n\
\n\
\n\
================================================================================\n\
MSG: krssg_ssl_msgs/gr_RobotReplacement\n\
float64 x \n\
float64 y \n\
float64 dir \n\
uint32 id \n\
bool yellowteam \n\
\n\
================================================================================\n\
MSG: krssg_ssl_msgs/sslDebug_Data\n\
string id\n\
sslDebug_Line[] line\n\
sslDebug_Circle[] circle\n\
================================================================================\n\
MSG: krssg_ssl_msgs/sslDebug_Line\n\
int32 x1\n\
int32 y1\n\
int32 x2\n\
int32 y2\n\
float32 color\n\
================================================================================\n\
MSG: krssg_ssl_msgs/sslDebug_Circle\n\
int32 x\n\
int32 y\n\
int32 radius\n\
float32 color\n\
";
  }

  static const char* value(const ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.commands);
      stream.next(m.replacement);
      stream.next(m.debuginfo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct gr_Packet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::krssg_ssl_msgs::gr_Packet_<ContainerAllocator>& v)
  {
    s << indent << "commands: ";
    s << std::endl;
    Printer< ::krssg_ssl_msgs::gr_Commands_<ContainerAllocator> >::stream(s, indent + "  ", v.commands);
    s << indent << "replacement: ";
    s << std::endl;
    Printer< ::krssg_ssl_msgs::gr_Replacement_<ContainerAllocator> >::stream(s, indent + "  ", v.replacement);
    s << indent << "debuginfo: ";
    s << std::endl;
    Printer< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> >::stream(s, indent + "  ", v.debuginfo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KRSSG_SSL_MSGS_MESSAGE_GR_PACKET_H
