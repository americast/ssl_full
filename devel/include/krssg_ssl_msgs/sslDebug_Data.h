// Generated by gencpp from file krssg_ssl_msgs/sslDebug_Data.msg
// DO NOT EDIT!


#ifndef KRSSG_SSL_MSGS_MESSAGE_SSLDEBUG_DATA_H
#define KRSSG_SSL_MSGS_MESSAGE_SSLDEBUG_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <krssg_ssl_msgs/sslDebug_Line.h>
#include <krssg_ssl_msgs/sslDebug_Circle.h>

namespace krssg_ssl_msgs
{
template <class ContainerAllocator>
struct sslDebug_Data_
{
  typedef sslDebug_Data_<ContainerAllocator> Type;

  sslDebug_Data_()
    : id()
    , line()
    , circle()  {
    }
  sslDebug_Data_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , line(_alloc)
    , circle(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::vector< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> >::other >  _line_type;
  _line_type line;

   typedef std::vector< ::krssg_ssl_msgs::sslDebug_Circle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::krssg_ssl_msgs::sslDebug_Circle_<ContainerAllocator> >::other >  _circle_type;
  _circle_type circle;




  typedef boost::shared_ptr< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> const> ConstPtr;

}; // struct sslDebug_Data_

typedef ::krssg_ssl_msgs::sslDebug_Data_<std::allocator<void> > sslDebug_Data;

typedef boost::shared_ptr< ::krssg_ssl_msgs::sslDebug_Data > sslDebug_DataPtr;
typedef boost::shared_ptr< ::krssg_ssl_msgs::sslDebug_Data const> sslDebug_DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace krssg_ssl_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'krssg_ssl_msgs': ['/home/ss/robocup/src/krssg_ssl_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4f68973c1a24950c9f075574765c5e7";
  }

  static const char* value(const ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4f68973c1a24950ULL;
  static const uint64_t static_value2 = 0xc9f075574765c5e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "krssg_ssl_msgs/sslDebug_Data";
  }

  static const char* value(const ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n\
sslDebug_Line[] line\n\
sslDebug_Circle[] circle\n\
================================================================================\n\
MSG: krssg_ssl_msgs/sslDebug_Line\n\
int32 x1\n\
int32 y1\n\
int32 x2\n\
int32 y2\n\
float32 color\n\
================================================================================\n\
MSG: krssg_ssl_msgs/sslDebug_Circle\n\
int32 x\n\
int32 y\n\
int32 radius\n\
float32 color\n\
";
  }

  static const char* value(const ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.line);
      stream.next(m.circle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct sslDebug_Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::krssg_ssl_msgs::sslDebug_Data_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "line[]" << std::endl;
    for (size_t i = 0; i < v.line.size(); ++i)
    {
      s << indent << "  line[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> >::stream(s, indent + "    ", v.line[i]);
    }
    s << indent << "circle[]" << std::endl;
    for (size_t i = 0; i < v.circle.size(); ++i)
    {
      s << indent << "  circle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::krssg_ssl_msgs::sslDebug_Circle_<ContainerAllocator> >::stream(s, indent + "    ", v.circle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KRSSG_SSL_MSGS_MESSAGE_SSLDEBUG_DATA_H
