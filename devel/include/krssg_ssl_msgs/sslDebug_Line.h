// Generated by gencpp from file krssg_ssl_msgs/sslDebug_Line.msg
// DO NOT EDIT!


#ifndef KRSSG_SSL_MSGS_MESSAGE_SSLDEBUG_LINE_H
#define KRSSG_SSL_MSGS_MESSAGE_SSLDEBUG_LINE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace krssg_ssl_msgs
{
template <class ContainerAllocator>
struct sslDebug_Line_
{
  typedef sslDebug_Line_<ContainerAllocator> Type;

  sslDebug_Line_()
    : x1(0)
    , y1(0)
    , x2(0)
    , y2(0)
    , color(0.0)  {
    }
  sslDebug_Line_(const ContainerAllocator& _alloc)
    : x1(0)
    , y1(0)
    , x2(0)
    , y2(0)
    , color(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _x1_type;
  _x1_type x1;

   typedef int32_t _y1_type;
  _y1_type y1;

   typedef int32_t _x2_type;
  _x2_type x2;

   typedef int32_t _y2_type;
  _y2_type y2;

   typedef float _color_type;
  _color_type color;




  typedef boost::shared_ptr< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> const> ConstPtr;

}; // struct sslDebug_Line_

typedef ::krssg_ssl_msgs::sslDebug_Line_<std::allocator<void> > sslDebug_Line;

typedef boost::shared_ptr< ::krssg_ssl_msgs::sslDebug_Line > sslDebug_LinePtr;
typedef boost::shared_ptr< ::krssg_ssl_msgs::sslDebug_Line const> sslDebug_LineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace krssg_ssl_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'krssg_ssl_msgs': ['/home/ss/robocup/src/krssg_ssl_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6a997272e335103cc40f893430337e8";
  }

  static const char* value(const ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6a997272e335103ULL;
  static const uint64_t static_value2 = 0xcc40f893430337e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> >
{
  static const char* value()
  {
    return "krssg_ssl_msgs/sslDebug_Line";
  }

  static const char* value(const ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 x1\n\
int32 y1\n\
int32 x2\n\
int32 y2\n\
float32 color\n\
";
  }

  static const char* value(const ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct sslDebug_Line_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::krssg_ssl_msgs::sslDebug_Line_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y2);
    s << indent << "color: ";
    Printer<float>::stream(s, indent + "  ", v.color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KRSSG_SSL_MSGS_MESSAGE_SSLDEBUG_LINE_H
