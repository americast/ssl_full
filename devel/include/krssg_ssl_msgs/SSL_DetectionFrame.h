// Generated by gencpp from file krssg_ssl_msgs/SSL_DetectionFrame.msg
// DO NOT EDIT!


#ifndef KRSSG_SSL_MSGS_MESSAGE_SSL_DETECTIONFRAME_H
#define KRSSG_SSL_MSGS_MESSAGE_SSL_DETECTIONFRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <krssg_ssl_msgs/SSL_DetectionBall.h>
#include <krssg_ssl_msgs/SSL_DetectionRobot.h>
#include <krssg_ssl_msgs/SSL_DetectionRobot.h>

namespace krssg_ssl_msgs
{
template <class ContainerAllocator>
struct SSL_DetectionFrame_
{
  typedef SSL_DetectionFrame_<ContainerAllocator> Type;

  SSL_DetectionFrame_()
    : frame_number(0)
    , t_capture(0.0)
    , t_sent(0.0)
    , camera_id(0)
    , balls()
    , robots_yellow()
    , robots_blue()  {
    }
  SSL_DetectionFrame_(const ContainerAllocator& _alloc)
    : frame_number(0)
    , t_capture(0.0)
    , t_sent(0.0)
    , camera_id(0)
    , balls(_alloc)
    , robots_yellow(_alloc)
    , robots_blue(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _frame_number_type;
  _frame_number_type frame_number;

   typedef double _t_capture_type;
  _t_capture_type t_capture;

   typedef double _t_sent_type;
  _t_sent_type t_sent;

   typedef uint32_t _camera_id_type;
  _camera_id_type camera_id;

   typedef std::vector< ::krssg_ssl_msgs::SSL_DetectionBall_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::krssg_ssl_msgs::SSL_DetectionBall_<ContainerAllocator> >::other >  _balls_type;
  _balls_type balls;

   typedef std::vector< ::krssg_ssl_msgs::SSL_DetectionRobot_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::krssg_ssl_msgs::SSL_DetectionRobot_<ContainerAllocator> >::other >  _robots_yellow_type;
  _robots_yellow_type robots_yellow;

   typedef std::vector< ::krssg_ssl_msgs::SSL_DetectionRobot_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::krssg_ssl_msgs::SSL_DetectionRobot_<ContainerAllocator> >::other >  _robots_blue_type;
  _robots_blue_type robots_blue;




  typedef boost::shared_ptr< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> const> ConstPtr;

}; // struct SSL_DetectionFrame_

typedef ::krssg_ssl_msgs::SSL_DetectionFrame_<std::allocator<void> > SSL_DetectionFrame;

typedef boost::shared_ptr< ::krssg_ssl_msgs::SSL_DetectionFrame > SSL_DetectionFramePtr;
typedef boost::shared_ptr< ::krssg_ssl_msgs::SSL_DetectionFrame const> SSL_DetectionFrameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace krssg_ssl_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'krssg_ssl_msgs': ['/home/aif/ssl/americast/src/krssg_ssl_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c644edf1c1b3db92581949cc15a0ca0";
  }

  static const char* value(const ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c644edf1c1b3db9ULL;
  static const uint64_t static_value2 = 0x2581949cc15a0ca0ULL;
};

template<class ContainerAllocator>
struct DataType< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "krssg_ssl_msgs/SSL_DetectionFrame";
  }

  static const char* value(const ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SSL_DetectionFrame.msg\n\
\n\
\n\
uint32             frame_number \n\
float64            t_capture     \n\
float64            t_sent        \n\
uint32             camera_id     \n\
SSL_DetectionBall[]  balls         \n\
SSL_DetectionRobot[] robots_yellow \n\
SSL_DetectionRobot[] robots_blue   \n\
\n\
================================================================================\n\
MSG: krssg_ssl_msgs/SSL_DetectionBall\n\
float64  confidence \n\
uint32 area      \n\
float64  x         \n\
float64  y          \n\
float64  z          \n\
float64  pixel_x    \n\
float64  pixel_y    \n\
\n\
================================================================================\n\
MSG: krssg_ssl_msgs/SSL_DetectionRobot\n\
float64  confidence \n\
uint32   robot_id      \n\
float64  x         \n\
float64  y           \n\
float64  orientation        \n\
float64  pixel_x    \n\
float64  pixel_y  \n\
float64  height   \n\
";
  }

  static const char* value(const ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_number);
      stream.next(m.t_capture);
      stream.next(m.t_sent);
      stream.next(m.camera_id);
      stream.next(m.balls);
      stream.next(m.robots_yellow);
      stream.next(m.robots_blue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SSL_DetectionFrame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::krssg_ssl_msgs::SSL_DetectionFrame_<ContainerAllocator>& v)
  {
    s << indent << "frame_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_number);
    s << indent << "t_capture: ";
    Printer<double>::stream(s, indent + "  ", v.t_capture);
    s << indent << "t_sent: ";
    Printer<double>::stream(s, indent + "  ", v.t_sent);
    s << indent << "camera_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.camera_id);
    s << indent << "balls[]" << std::endl;
    for (size_t i = 0; i < v.balls.size(); ++i)
    {
      s << indent << "  balls[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::krssg_ssl_msgs::SSL_DetectionBall_<ContainerAllocator> >::stream(s, indent + "    ", v.balls[i]);
    }
    s << indent << "robots_yellow[]" << std::endl;
    for (size_t i = 0; i < v.robots_yellow.size(); ++i)
    {
      s << indent << "  robots_yellow[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::krssg_ssl_msgs::SSL_DetectionRobot_<ContainerAllocator> >::stream(s, indent + "    ", v.robots_yellow[i]);
    }
    s << indent << "robots_blue[]" << std::endl;
    for (size_t i = 0; i < v.robots_blue.size(); ++i)
    {
      s << indent << "  robots_blue[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::krssg_ssl_msgs::SSL_DetectionRobot_<ContainerAllocator> >::stream(s, indent + "    ", v.robots_blue[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KRSSG_SSL_MSGS_MESSAGE_SSL_DETECTIONFRAME_H
