// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sslDebug_Data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sslDebug_Data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* sslDebug_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sslDebug_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Circle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Circle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Line_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Line_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_AdjustBot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_AdjustBot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_AdjustBall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_AdjustBall_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sslDebug_5fData_2eproto() {
  protobuf_AddDesc_sslDebug_5fData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sslDebug_Data.proto");
  GOOGLE_CHECK(file != NULL);
  sslDebug_Data_descriptor_ = file->message_type(0);
  static const int sslDebug_Data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, circle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, botpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, ballpos_),
  };
  sslDebug_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sslDebug_Data_descriptor_,
      sslDebug_Data::default_instance_,
      sslDebug_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sslDebug_Data));
  Debug_Circle_descriptor_ = file->message_type(1);
  static const int Debug_Circle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, color_),
  };
  Debug_Circle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Circle_descriptor_,
      Debug_Circle::default_instance_,
      Debug_Circle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Circle));
  Debug_Line_descriptor_ = file->message_type(2);
  static const int Debug_Line_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, color_),
  };
  Debug_Line_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Line_descriptor_,
      Debug_Line::default_instance_,
      Debug_Line_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Line));
  Debug_AdjustBot_descriptor_ = file->message_type(3);
  static const int Debug_AdjustBot_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, vz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, team_),
  };
  Debug_AdjustBot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_AdjustBot_descriptor_,
      Debug_AdjustBot::default_instance_,
      Debug_AdjustBot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_AdjustBot));
  Debug_AdjustBall_descriptor_ = file->message_type(4);
  static const int Debug_AdjustBall_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, vz_),
  };
  Debug_AdjustBall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_AdjustBall_descriptor_,
      Debug_AdjustBall::default_instance_,
      Debug_AdjustBall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_AdjustBall));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sslDebug_5fData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sslDebug_Data_descriptor_, &sslDebug_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Circle_descriptor_, &Debug_Circle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Line_descriptor_, &Debug_Line::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_AdjustBot_descriptor_, &Debug_AdjustBot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_AdjustBall_descriptor_, &Debug_AdjustBall::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sslDebug_5fData_2eproto() {
  delete sslDebug_Data::default_instance_;
  delete sslDebug_Data_reflection_;
  delete Debug_Circle::default_instance_;
  delete Debug_Circle_reflection_;
  delete Debug_Line::default_instance_;
  delete Debug_Line_reflection_;
  delete Debug_AdjustBot::default_instance_;
  delete Debug_AdjustBot_reflection_;
  delete Debug_AdjustBall::default_instance_;
  delete Debug_AdjustBall_reflection_;
}

void protobuf_AddDesc_sslDebug_5fData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023sslDebug_Data.proto\"\233\001\n\rsslDebug_Data\022"
    "\n\n\002id\030\001 \002(\t\022\035\n\006circle\030\002 \003(\0132\r.Debug_Circ"
    "le\022\031\n\004line\030\003 \003(\0132\013.Debug_Line\022 \n\006botpos\030"
    "\004 \003(\0132\020.Debug_AdjustBot\022\"\n\007ballpos\030\005 \003(\013"
    "2\021.Debug_AdjustBall\"C\n\014Debug_Circle\022\t\n\001x"
    "\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\016\n\006radius\030\003 \002(\005\022\r\n\005col"
    "or\030\004 \002(\002\"K\n\nDebug_Line\022\n\n\002x1\030\001 \002(\005\022\n\n\002y1"
    "\030\002 \002(\005\022\n\n\002x2\030\003 \002(\005\022\n\n\002y2\030\004 \002(\005\022\r\n\005color\030"
    "\005 \002(\002\"r\n\017Debug_AdjustBot\022\n\n\002id\030\001 \002(\r\022\t\n\001"
    "x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\022\013\n\003dir\030\004 \002(\002\022\n\n\002vx\030\005 "
    "\002(\005\022\n\n\002vy\030\006 \002(\005\022\n\n\002vz\030\007 \002(\005\022\014\n\004team\030\010 \002("
    "\r\"L\n\020Debug_AdjustBall\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 "
    "\002(\005\022\n\n\002vx\030\003 \002(\005\022\n\n\002vy\030\004 \002(\005\022\n\n\002vz\030\005 \002(\r", 519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sslDebug_Data.proto", &protobuf_RegisterTypes);
  sslDebug_Data::default_instance_ = new sslDebug_Data();
  Debug_Circle::default_instance_ = new Debug_Circle();
  Debug_Line::default_instance_ = new Debug_Line();
  Debug_AdjustBot::default_instance_ = new Debug_AdjustBot();
  Debug_AdjustBall::default_instance_ = new Debug_AdjustBall();
  sslDebug_Data::default_instance_->InitAsDefaultInstance();
  Debug_Circle::default_instance_->InitAsDefaultInstance();
  Debug_Line::default_instance_->InitAsDefaultInstance();
  Debug_AdjustBot::default_instance_->InitAsDefaultInstance();
  Debug_AdjustBall::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sslDebug_5fData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sslDebug_5fData_2eproto {
  StaticDescriptorInitializer_sslDebug_5fData_2eproto() {
    protobuf_AddDesc_sslDebug_5fData_2eproto();
  }
} static_descriptor_initializer_sslDebug_5fData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int sslDebug_Data::kIdFieldNumber;
const int sslDebug_Data::kCircleFieldNumber;
const int sslDebug_Data::kLineFieldNumber;
const int sslDebug_Data::kBotposFieldNumber;
const int sslDebug_Data::kBallposFieldNumber;
#endif  // !_MSC_VER

sslDebug_Data::sslDebug_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sslDebug_Data::InitAsDefaultInstance() {
}

sslDebug_Data::sslDebug_Data(const sslDebug_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sslDebug_Data::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sslDebug_Data::~sslDebug_Data() {
  SharedDtor();
}

void sslDebug_Data::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void sslDebug_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sslDebug_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sslDebug_Data_descriptor_;
}

const sslDebug_Data& sslDebug_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sslDebug_5fData_2eproto();
  return *default_instance_;
}

sslDebug_Data* sslDebug_Data::default_instance_ = NULL;

sslDebug_Data* sslDebug_Data::New() const {
  return new sslDebug_Data;
}

void sslDebug_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  circle_.Clear();
  line_.Clear();
  botpos_.Clear();
  ballpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sslDebug_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_circle;
        break;
      }

      // repeated .Debug_Circle circle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_circle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_circle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_circle;
        if (input->ExpectTag(26)) goto parse_line;
        break;
      }

      // repeated .Debug_Line line = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_line()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_line;
        if (input->ExpectTag(34)) goto parse_botpos;
        break;
      }

      // repeated .Debug_AdjustBot botpos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_botpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_botpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_botpos;
        if (input->ExpectTag(42)) goto parse_ballpos;
        break;
      }

      // repeated .Debug_AdjustBall ballpos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ballpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ballpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ballpos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sslDebug_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // repeated .Debug_Circle circle = 2;
  for (int i = 0; i < this->circle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->circle(i), output);
  }

  // repeated .Debug_Line line = 3;
  for (int i = 0; i < this->line_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->line(i), output);
  }

  // repeated .Debug_AdjustBot botpos = 4;
  for (int i = 0; i < this->botpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->botpos(i), output);
  }

  // repeated .Debug_AdjustBall ballpos = 5;
  for (int i = 0; i < this->ballpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ballpos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sslDebug_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .Debug_Circle circle = 2;
  for (int i = 0; i < this->circle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->circle(i), target);
  }

  // repeated .Debug_Line line = 3;
  for (int i = 0; i < this->line_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->line(i), target);
  }

  // repeated .Debug_AdjustBot botpos = 4;
  for (int i = 0; i < this->botpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->botpos(i), target);
  }

  // repeated .Debug_AdjustBall ballpos = 5;
  for (int i = 0; i < this->ballpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ballpos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sslDebug_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated .Debug_Circle circle = 2;
  total_size += 1 * this->circle_size();
  for (int i = 0; i < this->circle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->circle(i));
  }

  // repeated .Debug_Line line = 3;
  total_size += 1 * this->line_size();
  for (int i = 0; i < this->line_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->line(i));
  }

  // repeated .Debug_AdjustBot botpos = 4;
  total_size += 1 * this->botpos_size();
  for (int i = 0; i < this->botpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->botpos(i));
  }

  // repeated .Debug_AdjustBall ballpos = 5;
  total_size += 1 * this->ballpos_size();
  for (int i = 0; i < this->ballpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ballpos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sslDebug_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sslDebug_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sslDebug_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sslDebug_Data::MergeFrom(const sslDebug_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  circle_.MergeFrom(from.circle_);
  line_.MergeFrom(from.line_);
  botpos_.MergeFrom(from.botpos_);
  ballpos_.MergeFrom(from.ballpos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sslDebug_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sslDebug_Data::CopyFrom(const sslDebug_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sslDebug_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < circle_size(); i++) {
    if (!this->circle(i).IsInitialized()) return false;
  }
  for (int i = 0; i < line_size(); i++) {
    if (!this->line(i).IsInitialized()) return false;
  }
  for (int i = 0; i < botpos_size(); i++) {
    if (!this->botpos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ballpos_size(); i++) {
    if (!this->ballpos(i).IsInitialized()) return false;
  }
  return true;
}

void sslDebug_Data::Swap(sslDebug_Data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    circle_.Swap(&other->circle_);
    line_.Swap(&other->line_);
    botpos_.Swap(&other->botpos_);
    ballpos_.Swap(&other->ballpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sslDebug_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sslDebug_Data_descriptor_;
  metadata.reflection = sslDebug_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Circle::kXFieldNumber;
const int Debug_Circle::kYFieldNumber;
const int Debug_Circle::kRadiusFieldNumber;
const int Debug_Circle::kColorFieldNumber;
#endif  // !_MSC_VER

Debug_Circle::Debug_Circle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Debug_Circle::InitAsDefaultInstance() {
}

Debug_Circle::Debug_Circle(const Debug_Circle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Debug_Circle::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  radius_ = 0;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Circle::~Debug_Circle() {
  SharedDtor();
}

void Debug_Circle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Debug_Circle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Circle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Circle_descriptor_;
}

const Debug_Circle& Debug_Circle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sslDebug_5fData_2eproto();
  return *default_instance_;
}

Debug_Circle* Debug_Circle::default_instance_ = NULL;

Debug_Circle* Debug_Circle::New() const {
  return new Debug_Circle;
}

void Debug_Circle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    radius_ = 0;
    color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_radius;
        break;
      }

      // required int32 radius = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_color;
        break;
      }

      // required float color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Debug_Circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 radius = 3;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->radius(), output);
  }

  // required float color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Debug_Circle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 radius = 3;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->radius(), target);
  }

  // required float color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Debug_Circle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 radius = 3;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }

    // required float color = 4;
    if (has_color()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Circle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Circle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Circle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Circle::MergeFrom(const Debug_Circle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Circle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Circle::CopyFrom(const Debug_Circle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Circle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Debug_Circle::Swap(Debug_Circle* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(radius_, other->radius_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Circle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Circle_descriptor_;
  metadata.reflection = Debug_Circle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Line::kX1FieldNumber;
const int Debug_Line::kY1FieldNumber;
const int Debug_Line::kX2FieldNumber;
const int Debug_Line::kY2FieldNumber;
const int Debug_Line::kColorFieldNumber;
#endif  // !_MSC_VER

Debug_Line::Debug_Line()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Debug_Line::InitAsDefaultInstance() {
}

Debug_Line::Debug_Line(const Debug_Line& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Debug_Line::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  y1_ = 0;
  x2_ = 0;
  y2_ = 0;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Line::~Debug_Line() {
  SharedDtor();
}

void Debug_Line::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Debug_Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Line::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Line_descriptor_;
}

const Debug_Line& Debug_Line::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sslDebug_5fData_2eproto();
  return *default_instance_;
}

Debug_Line* Debug_Line::default_instance_ = NULL;

Debug_Line* Debug_Line::New() const {
  return new Debug_Line;
}

void Debug_Line::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x1_ = 0;
    y1_ = 0;
    x2_ = 0;
    y2_ = 0;
    color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y1;
        break;
      }

      // required int32 y1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x2;
        break;
      }

      // required int32 x2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y2;
        break;
      }

      // required int32 y2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y2_)));
          set_has_y2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_color;
        break;
      }

      // required float color = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Debug_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x1 = 1;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x1(), output);
  }

  // required int32 y1 = 2;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y1(), output);
  }

  // required int32 x2 = 3;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x2(), output);
  }

  // required int32 y2 = 4;
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y2(), output);
  }

  // required float color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Debug_Line::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x1 = 1;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x1(), target);
  }

  // required int32 y1 = 2;
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y1(), target);
  }

  // required int32 x2 = 3;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x2(), target);
  }

  // required int32 y2 = 4;
  if (has_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y2(), target);
  }

  // required float color = 5;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Debug_Line::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x1 = 1;
    if (has_x1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x1());
    }

    // required int32 y1 = 2;
    if (has_y1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y1());
    }

    // required int32 x2 = 3;
    if (has_x2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x2());
    }

    // required int32 y2 = 4;
    if (has_y2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y2());
    }

    // required float color = 5;
    if (has_color()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Line::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Line* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Line*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Line::MergeFrom(const Debug_Line& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_y2()) {
      set_y2(from.y2());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Line::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Line::CopyFrom(const Debug_Line& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Line::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Debug_Line::Swap(Debug_Line* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(y1_, other->y1_);
    std::swap(x2_, other->x2_);
    std::swap(y2_, other->y2_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Line::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Line_descriptor_;
  metadata.reflection = Debug_Line_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_AdjustBot::kIdFieldNumber;
const int Debug_AdjustBot::kXFieldNumber;
const int Debug_AdjustBot::kYFieldNumber;
const int Debug_AdjustBot::kDirFieldNumber;
const int Debug_AdjustBot::kVxFieldNumber;
const int Debug_AdjustBot::kVyFieldNumber;
const int Debug_AdjustBot::kVzFieldNumber;
const int Debug_AdjustBot::kTeamFieldNumber;
#endif  // !_MSC_VER

Debug_AdjustBot::Debug_AdjustBot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Debug_AdjustBot::InitAsDefaultInstance() {
}

Debug_AdjustBot::Debug_AdjustBot(const Debug_AdjustBot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Debug_AdjustBot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0;
  y_ = 0;
  dir_ = 0;
  vx_ = 0;
  vy_ = 0;
  vz_ = 0;
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_AdjustBot::~Debug_AdjustBot() {
  SharedDtor();
}

void Debug_AdjustBot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Debug_AdjustBot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_AdjustBot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_AdjustBot_descriptor_;
}

const Debug_AdjustBot& Debug_AdjustBot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sslDebug_5fData_2eproto();
  return *default_instance_;
}

Debug_AdjustBot* Debug_AdjustBot::default_instance_ = NULL;

Debug_AdjustBot* Debug_AdjustBot::New() const {
  return new Debug_AdjustBot;
}

void Debug_AdjustBot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0;
    y_ = 0;
    dir_ = 0;
    vx_ = 0;
    vy_ = 0;
    vz_ = 0;
    team_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_AdjustBot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dir;
        break;
      }

      // required float dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vx;
        break;
      }

      // required int32 vx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vx_)));
          set_has_vx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vy;
        break;
      }

      // required int32 vy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vy_)));
          set_has_vy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vz;
        break;
      }

      // required int32 vz = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vz_)));
          set_has_vz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_team;
        break;
      }

      // required uint32 team = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Debug_AdjustBot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // required float dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }

  // required int32 vx = 5;
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vx(), output);
  }

  // required int32 vy = 6;
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vy(), output);
  }

  // required int32 vz = 7;
  if (has_vz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vz(), output);
  }

  // required uint32 team = 8;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Debug_AdjustBot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // required float dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }

  // required int32 vx = 5;
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vx(), target);
  }

  // required int32 vy = 6;
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vy(), target);
  }

  // required int32 vz = 7;
  if (has_vz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vz(), target);
  }

  // required uint32 team = 8;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Debug_AdjustBot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required float dir = 4;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // required int32 vx = 5;
    if (has_vx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vx());
    }

    // required int32 vy = 6;
    if (has_vy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vy());
    }

    // required int32 vz = 7;
    if (has_vz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vz());
    }

    // required uint32 team = 8;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_AdjustBot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_AdjustBot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_AdjustBot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_AdjustBot::MergeFrom(const Debug_AdjustBot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
    if (from.has_vy()) {
      set_vy(from.vy());
    }
    if (from.has_vz()) {
      set_vz(from.vz());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_AdjustBot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_AdjustBot::CopyFrom(const Debug_AdjustBot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_AdjustBot::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Debug_AdjustBot::Swap(Debug_AdjustBot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(dir_, other->dir_);
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(vz_, other->vz_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_AdjustBot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_AdjustBot_descriptor_;
  metadata.reflection = Debug_AdjustBot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_AdjustBall::kXFieldNumber;
const int Debug_AdjustBall::kYFieldNumber;
const int Debug_AdjustBall::kVxFieldNumber;
const int Debug_AdjustBall::kVyFieldNumber;
const int Debug_AdjustBall::kVzFieldNumber;
#endif  // !_MSC_VER

Debug_AdjustBall::Debug_AdjustBall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Debug_AdjustBall::InitAsDefaultInstance() {
}

Debug_AdjustBall::Debug_AdjustBall(const Debug_AdjustBall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Debug_AdjustBall::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  vx_ = 0;
  vy_ = 0;
  vz_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_AdjustBall::~Debug_AdjustBall() {
  SharedDtor();
}

void Debug_AdjustBall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Debug_AdjustBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_AdjustBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_AdjustBall_descriptor_;
}

const Debug_AdjustBall& Debug_AdjustBall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sslDebug_5fData_2eproto();
  return *default_instance_;
}

Debug_AdjustBall* Debug_AdjustBall::default_instance_ = NULL;

Debug_AdjustBall* Debug_AdjustBall::New() const {
  return new Debug_AdjustBall;
}

void Debug_AdjustBall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    vx_ = 0;
    vy_ = 0;
    vz_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_AdjustBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vx;
        break;
      }

      // required int32 vx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vx_)));
          set_has_vx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vy;
        break;
      }

      // required int32 vy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vy_)));
          set_has_vy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vz;
        break;
      }

      // required uint32 vz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vz_)));
          set_has_vz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Debug_AdjustBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 vx = 3;
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vx(), output);
  }

  // required int32 vy = 4;
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vy(), output);
  }

  // required uint32 vz = 5;
  if (has_vz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Debug_AdjustBall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 vx = 3;
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vx(), target);
  }

  // required int32 vy = 4;
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vy(), target);
  }

  // required uint32 vz = 5;
  if (has_vz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Debug_AdjustBall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 vx = 3;
    if (has_vx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vx());
    }

    // required int32 vy = 4;
    if (has_vy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vy());
    }

    // required uint32 vz = 5;
    if (has_vz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_AdjustBall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_AdjustBall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_AdjustBall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_AdjustBall::MergeFrom(const Debug_AdjustBall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
    if (from.has_vy()) {
      set_vy(from.vy());
    }
    if (from.has_vz()) {
      set_vz(from.vz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_AdjustBall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_AdjustBall::CopyFrom(const Debug_AdjustBall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_AdjustBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Debug_AdjustBall::Swap(Debug_AdjustBall* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(vz_, other->vz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_AdjustBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_AdjustBall_descriptor_;
  metadata.reflection = Debug_AdjustBall_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
